import {expect} from "chai";

const path = require("path");
const tester = require("circom_tester").wasm;

export {};

describe("StateTransition", function () {
    this.timeout(600000);

    let circuit;

    before(async () => {
        circuit = await tester(
            path.join(__dirname, "circuits", "stateTransitionTest.circom"),
            {
                output: path.join(__dirname, "circuits", "build"),
                recompile: true,
                reduceConstraints: false,
            },
        );
    });

    it("Positive: old state is genesis", async () => {
        const inputs = {
            "authClaim": ["269270088098491255471307608775043319525", "0", "17640206035128972995519606214765283372613874593503528180869261482403155458945", "20634138280259599560273310290025659992320584624461316485434108770067472477956", "15930428023331155902", "0", "0", "0"],
            "authClaimMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "authClaimNonRevMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "authClaimNonRevMtpAuxHi": "0",
            "authClaimNonRevMtpAuxHv": "0",
            "authClaimNonRevMtpNoAux": "1",
            "claimsTreeRoot": "8033159210005724351649063848617878571712113104821846241291681963936214187701",
            "userID": "286312392162647260160287083374160163061246635086990474403590223113720496128",
            "newUserState": "21799818405085739943263537616587664863501401321957145427557061721281929782461",
            "oldUserState": "5816868615164565912277677884704888703982258184820398645933682814085602171910",
            "isOldStateGenesis": "1", // Any non zero number is treated as "true". Not only "1"
            "revTreeRoot": "0",
            "rootsTreeRoot": "0",
            "signatureR8x": "924229511036398292143820239071666765065432594508727879794996024933675378510",
            "signatureR8y": "20753388553532586006068583183865211587635086955236339535622665238192945735351",
            "signatureS": "1040843711675998491396207438606759172296023541812676125253819774875626968892"
        }

        const witness = await circuit.calculateWitness(inputs);
        await circuit.checkConstraints(witness);
    });

    it("Positive: old state is not genesis", async () => {
        const inputs = {
            "authClaim": ["269270088098491255471307608775043319525", "0", "17640206035128972995519606214765283372613874593503528180869261482403155458945", "20634138280259599560273310290025659992320584624461316485434108770067472477956", "15930428023331155902", "0", "0", "0"],
            "authClaimMtp": ["13372667420776245507135662704254341640487891692529518280645910201071920780853", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "authClaimNonRevMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "authClaimNonRevMtpAuxHi": "0",
            "authClaimNonRevMtpAuxHv": "0",
            "authClaimNonRevMtpNoAux": "1",
            "claimsTreeRoot": "1267420139493013179506222700019094822263769414097067662137215579894068836606",
            "userID": "286312392162647260160287083374160163061246635086990474403590223113720496128",
            "newUserState": "10332676133729972039262626492852671943221145751058671626527610751366216608240",
            "oldUserState": "21799818405085739943263537616587664863501401321957145427557061721281929782461",
            "isOldStateGenesis": "0",
            "revTreeRoot": "0",
            "rootsTreeRoot": "0",
            "signatureR8x": "14935841876992196650290310323130702464771483840598973988087379244811046653310",
            "signatureR8y": "20835366633192289681384294641548442386122746578911648696000858421483453786527",
            "signatureS": "133844829310960255739246008812523045200790046977777361390734900673323671463",
        }

        const witness = await circuit.calculateWitness(inputs);
        await circuit.checkConstraints(witness);
    });

    it("Negative: old state is genesis", async () => {
        const inputs = {
            "authClaim": ["269270088098491255471307608775043319525", "0", "17640206035128972995519606214765283372613874593503528180869261482403155458945", "20634138280259599560273310290025659992320584624461316485434108770067472477956", "15930428023331155902", "0", "0", "0"],
            "authClaimMtp": ["13372667420776245507135662704254341640487891692529518280645910201071920780853", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "authClaimNonRevMtp": ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
            "authClaimNonRevMtpAuxHi": "0",
            "authClaimNonRevMtpAuxHv": "0",
            "authClaimNonRevMtpNoAux": "1",
            "claimsTreeRoot": "1267420139493013179506222700019094822263769414097067662137215579894068836606",
            "userID": "286312392162647260160287083374160163061246635086990474403590223113720496128",
            "newUserState": "10332676133729972039262626492852671943221145751058671626527610751366216608240",
            "oldUserState": "21799818405085739943263537616587664863501401321957145427557061721281929782461",
            "isOldStateGenesis": "1",
            "revTreeRoot": "0",
            "rootsTreeRoot": "0",
            "signatureR8x": "14935841876992196650290310323130702464771483840598973988087379244811046653310",
            "signatureR8y": "20835366633192289681384294641548442386122746578911648696000858421483453786527",
            "signatureS": "133844829310960255739246008812523045200790046977777361390734900673323671463",
        }

        let error;
        await circuit.calculateWitness(inputs, true).catch((err) => {
            error = err;
        });

        expect(error.message).to.include("Error: Assert Failed. Error in template StateTransition")
    });
});
