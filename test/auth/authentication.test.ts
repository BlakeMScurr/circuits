import {describe} from "mocha";

const path = require("path");
const wasm_tester = require("circom_tester").wasm;

// inputs MUST be generated by GO-CIRCUITS library https://github.com/iden3/go-circuits (using corresponding test)
describe('auth.circom:', async function () {
    const tests = [
        {
            desc: 'success',

            input: {
                "authClaim": ["269270088098491255471307608775043319525", "0", "17640206035128972995519606214765283372613874593503528180869261482403155458945", "20634138280259599560273310290025659992320584624461316485434108770067472477956", "15930428023331155902", "0", "0", "0"],
                "authClaimMtp": ["0", "0", "0", "0"],
                "authClaimNonRevMtp": ["0", "0", "0", "0"],
                "authClaimNonRevMtpAuxHi": "0",
                "authClaimNonRevMtpAuxHv": "0",
                "authClaimNonRevMtpNoAux": "1",
                "challenge": "1",
                "challengeSignatureR8x": "8553678144208642175027223770335048072652078621216414881653012537434846327449",
                "challengeSignatureR8y": "5507837342589329113352496188906367161790372084365285966741761856353367255709",
                "challengeSignatureS": "2093461910575977345603199789919760192811763972089699387324401771367839603655",
                "claimsTreeRoot": "8033159210005724351649063848617878571712113104821846241291681963936214187701",
                "id": "286312392162647260160287083374160163061246635086990474403590223113720496128",
                "revTreeRoot": "0",
                "rootsTreeRoot": "0",
                "state": "5816868615164565912277677884704888703982258184820398645933682814085602171910"
            },
            expOut: {
                challenge: 1,
                id: "286312392162647260160287083374160163061246635086990474403590223113720496128",
                state: "5816868615164565912277677884704888703982258184820398645933682814085602171910"
            }
        }

    ];

    let circuit;
    this.timeout(300000)

    before(async function () {
        circuit = await wasm_tester(
            path.join(__dirname, "../circuits", "auth.circom"),
            {
                output: path.join(__dirname, "../circuits", "build/auth"),
                recompile: false,
                reduceConstraints: false,
            }
        );
    });

    tests.forEach(({desc, input, expOut}) => {
        it(`auth ${desc}`, async function () {
            const w = await circuit.calculateWitness(input, true);
            await circuit.checkConstraints(w);
            await circuit.assertOut(w, expOut);
        });
    });
});
